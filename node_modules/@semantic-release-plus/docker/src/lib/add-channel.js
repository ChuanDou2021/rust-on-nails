"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addChannel = void 0;
const docker_utils_1 = require("./docker-utils");
const get_channel_1 = require("./get-channel");
const normalize_config_1 = require("./normalize-config");
async function addChannel(pluginConfig, context) {
    const { nextRelease: { version, channel }, logger, } = context;
    const { image } = normalize_config_1.normalizeConfig(pluginConfig);
    // normally we would assume the image name exactly as written in the name property
    // in this case since there is no guarantee that the image is local on the machine
    // we will prepend the registry if defined to pull from the remote registry
    const channelTag = get_channel_1.getChannel(channel);
    const imageVersionTag = `${image.name}:${version}`;
    const imageChannelTag = `${image.name}:${channelTag}`;
    // pull the image to the local machine
    const { stdout: pullStdout } = await docker_utils_1.dockerPull(imageVersionTag, context);
    logger.log(pullStdout);
    // tag the pulled image with the new channel
    const { stdout: tagStdout } = await docker_utils_1.dockerTag(imageVersionTag, imageChannelTag, context);
    logger.log(tagStdout);
    // push the new tagged image to remote registry
    const { stdout: pushStdout } = await docker_utils_1.dockerPush(imageChannelTag, context);
    logger.log(pushStdout);
    logger.log(`Added ${imageVersionTag} to tag ${channelTag} on ${image.registry || 'docker.io'}`);
    return {
        name: `docker container ${channelTag} tag`,
        url: image.registry || 'docker.io',
        channel: channelTag,
    };
}
exports.addChannel = addChannel;
//# sourceMappingURL=add-channel.js.map